# Γράψτε ένα κώδικα σε Python ο οποίος να παίρνει τις διαστάσεις ενός ορθογωνίου και θα φτιάχνει μέσα από λίστες τον αντίστοιχο πίνακα.
# Στην συνέχεια θα βρίσκει το πλήθος των θέσεων και γεμίζει στην τύχη τις μισές με S και τις μισές με O.
# Σκοπός είναι να μετρήσετε πόσες φορές εμφανίζεται το SOS οριζόντια, κάθετα, και διαγώνια.
# Το πρόγραμμα επαναλλαμβάνεται 100 φορές (για τις ίδιες διαστάσεις) και επιστρέφει τον μέσο όρο των τριάδων SOS.

import random

#Functions

def randomGenerator(c,r):
    test = c*r
    randomNums = []
    for x in range(test//2):
        value = random.randint(0, test)
        if len(randomNums)==0:
            randomNums.append(value)

        else:
            while (value in randomNums):
                value = random.randint(0, test)
            randomNums.append(value)

    return  randomNums


def createBoard(c,r):
    counterPos = 0
    randomPos = randomGenerator(c,r)
    arr = []
    for i in range(c):
        col = []
        for j in range(r):
            if counterPos in randomPos:
                col.append("S")
            else:
                col.append("O")
            counterPos = counterPos + 1
        arr.append(col)
    return arr

def printBoard(arr):
    for r in arr:
        print(' '.join([str(elem) for elem in r]))

def get_rows(arr):
    return [[c for c in r] for r in arr]

def sosInRows(arr):
    counterSOSInRows = 0
    for i in range(len(rows)):
        for j in range(len(rows[i])-2):
            if len(rows[i])>=3 :
                if rows[i][j] == rows[i][j+2] == "S" and rows[i][j+1]== "O":
                    counterSOSInRows = counterSOSInRows + 1
    return counterSOSInRows

def sosInCols(arr):
    counterSOSInCols = 0

    for i in range(len(colss)):
        for j in range(len(colss[i])-2):
             if len(colss[i]) >=3:
                if colss[i][j] == colss[i][j+2] == "S" and colss[i][j+1]== "O":
                    counterSOSInCols = counterSOSInCols + 1
    return counterSOSInCols



def get_cols(arr):
    return zip(*arr)

def column(arr):
    return [list(r) for r in zip(*arr)]

def sosInBackDiagonal(arr):
    counterSosInBackDiagonal = 0
    for i in range(len(backDiagonals)):
        for j in range(len(backDiagonals[i])-2):
            if len(backDiagonals[i])>=3:
                if backDiagonals[i][j] == backDiagonals[i][j+2] == "S" and backDiagonals[i][j+1]== "O":
                    counterSosInBackDiagonal = counterSosInBackDiagonal + 1
    return counterSosInBackDiagonal

def get_backward_diagonals(arr):
    b = [None] * (len(arr) - 1)
    arr = [b[i:] + r + b[:i] for i, r in enumerate(get_rows(arr))]
    return [[c for c in r if c is not None] for r in get_cols(arr)]

def sosInFrontDiagonal(arr):
    counterSosInFrontDiagonal = 0
    for i in range(len(frontDiagonals)):
        for j in range(len(frontDiagonals[i])-2):
            if len(frontDiagonals[i])>=3:
                if frontDiagonals[i][j] == frontDiagonals[i][j+2] == "S" and frontDiagonals[i][j+1]== "O":
                    counterSosInFrontDiagonal = counterSosInFrontDiagonal + 1
    return counterSosInFrontDiagonal

def get_forward_diagonals(arr):
    b = [None] * (len(arr) - 1)
    arr = [b[:i] + r + b[i:] for i, r in enumerate(get_rows(arr))]
    return [[c for c in r if c is not None] for r in get_cols(arr)]


def averageRow(rowsList,columnsList,backDiagonalList,frontDiagonalList):
    averageR = sum(rowsList)/len(rowsList)
    print(f"Average SOS in Rows: {averageR}")
    averageC = sum(columnsList) / len(columnsList)
    print(f"Average SOS in Columns: {averageC}")
    averageB = sum(backDiagonalList) / len(backDiagonalList)
    print(f"Average SOS in Back Diagonals: {averageB}")
    averageF = sum(frontDiagonalList) / len(frontDiagonalList)
    print(f"Average SOS in Front Diagonals: {averageF}")
    print("- - - - - - - - - - - - -\n")

#Main Program

rowsList = []
columnsList = []
backDiagonalList = []
frontDiagonalList = []

r = int(input("Give me the rows of the board:\n"))
c = int(input("Give me the columns of the board:\n"))




for turns in range(100):


    board = createBoard(r, c)
    print("- - - - - - - - - - - - -\n")
    printBoard(board)

    # All Rows
    rows = get_rows(board)
    # Helper for Calculation Diagonals
    cols = get_cols(board)
    # All Cols
    colss = column(board)
    # All Back Diagonals
    backDiagonals = get_backward_diagonals(board)
    # All Front Diagonals
    frontDiagonals = get_forward_diagonals(board)

    #Sum of SOS
    sosRows = sosInRows(board)
    sosCols = sosInCols(board)
    sosBackDiagonals = sosInBackDiagonal(board)
    sosFrontDiagonals = sosInFrontDiagonal(board)


    print(f"\nSOS in Rows: {sosRows}")
    print(f"SOS in Columns: {sosCols}")
    print(f"SOS in Front Diagonals: {sosBackDiagonals}")
    print(f"SOS in Back Diagonals: {sosFrontDiagonals}\n")

    rowsList.append(sosInRows(board))
    columnsList.append(sosInCols(board))
    backDiagonalList.append(sosInBackDiagonal(board))
    frontDiagonalList.append(sosInFrontDiagonal(board))

print("\n- - - - - - - - - - - - -")
averageRow(rowsList,columnsList,backDiagonalList,frontDiagonalList)